name: CI/CD

# Triggers on push of tags starting with v
on:
  push:
    tags:
      - 'v*'

# Permissions allowed for github actions
permissions:
  contents: write

jobs:
  # Testing stage
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # Checks out the code from repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags
          ref: main

      # Install flutter and neccessary tools
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.0

      # Sync the dependancies for the application
      - name: Install dependencies
        run: flutter pub get

      # Run the tests
      - name: Run tests
        id: test_step
        run: "# Condition to check if tests pass\nif flutter test; then \n  echo \"TEST_STATUS=Passing\" >> $GITHUB_ENV\n  echo \"BADGE_COLOR=green\" >> $GITHUB_ENV\nelse\n  echo \"TEST_STATUS=Failing\" >> $GITHUB_ENV\n  echo \"BADGE_COLOR=red\" >> $GITHUB_ENV\n  exit 1\nfi\n"

      # Generate badge based on test status
      - name: Generate Badge 
        run: |
          BADGE_URL="https://img.shields.io/badge/Tests-${{ env.TEST_STATUS }}-${{ env.BADGE_COLOR }}?style=for-the-badge&logo=testcafe&logoColor=ffffff"
          curl -o test-status.svg "$BADGE_URL"

      # Push the generated badge to the repo
      - name: Commit and Push Badge
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          mv test-status.svg .github/assets/test-status.svg
          git add .github/assets/test-status.svg
          git diff --staged --quiet || git commit -m "ci/cd: Update test status badge" # Only commit if there are changes
          git push origin main

  # Building stage
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      # Checks out code from repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags
          ref: main

      # Install flutter and other required tools for building
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.0

      # Sync the dependencies
      - name: Install dependencies
        run: flutter pub get

      # Decrypt the release key for signing the application builds
      - name: Decrypt keystore
        run: |
          gpg --quiet --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
          -o release-keystore.jks release-keystore.jks.gpg

      # Create the key reference file (build.gradle uses this file for signing)
      - name: Create key.properties
        run: |
          cat <<EOF > android/key.properties
          storeFile=../../release-keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF

      # Build the apk signed with release keys
      - name: Build APK
        id: build_step
        run: |
          # Condition to check if build passes
          if flutter build apk --release --split-per-abi; then
            echo "BUILD_STATUS=Passing" >> $GITHUB_ENV
            echo "BADGE_COLOR=green" >> $GITHUB_ENV
          else
            echo "BUILD_STATUS=Failing" >> $GITHUB_ENV
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
            exit 1
          fi

      # Generate badge based on build status
      - name: Generate Build Badge 
        run: |
          BADGE_URL="https://img.shields.io/badge/Builds-${{ env.BUILD_STATUS }}-${{ env.BADGE_COLOR }}?style=for-the-badge&logo=androidstudio&logoColor=ffffff"
          curl -o build-status.svg "$BADGE_URL"

      # Push the generated badge to repo
      - name: Commit and Push Build Badge
        run: |
          git pull
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          mv build-status.svg .github/assets/build-status.svg
          git add .github/assets/build-status.svg
          git diff --staged --quiet || git commit -m "ci/cd: Update build status badge" # Only commit if there are changes
          git push origin main

      # Rename builds (apks) with version numbers for easier identification
      - name: Rename APK with version
        run: |
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk build/app/outputs/flutter-apk/nic-app-armabi-v7a-${{ github.ref_name }}.apk
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk build/app/outputs/flutter-apk/nic-app-arm64-v8a-${{ github.ref_name }}.apk

      # Upload the build apks as upload-artifacts
      - name: Upload arm APK
        uses: actions/upload-artifact@v4
        with:
          name: app-arm
          path: build/app/outputs/flutter-apk/nic-app-armabi-v7a-${{ github.ref_name }}.apk
      - name: Upload arm64 APK
        uses: actions/upload-artifact@v4
        with:
          name: app-arm64
          path: build/app/outputs/flutter-apk/nic-app-arm64-v8a-${{ github.ref_name }}.apk

  # Release stage
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checks out code from repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags
          ref: main

      # Download the uploaded artifacts from previous stage
      - name: Download arm APK
        uses: actions/download-artifact@v4
        with:
          name: app-arm
          path: release-assets/
      - name: Download arm64 APK
        uses: actions/download-artifact@v4
        with:
          name: app-arm64
          path: release-assets/

      # Generate release notes using commit history by tag comparison
      - name: Generate Release Notes
        run: |
          # Get previous tag
          PREV_TAG=$(git tag --sort=-v:refname | sed -n 2p)
          CURR_TAG=${{ github.ref_name }}
          RELEASE_NOTES="release-assets/release-notes.md"

          echo "# What's new?" > $RELEASE_NOTES

          # Get commits between tags
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log --pretty=format:"%s" $PREV_TAG..$CURR_TAG)
          fi

          FEATURES=$(echo "$COMMITS" | grep -iE "^feat: " | sed 's/^feat: //')
          FIXES=$(echo "$COMMITS" | grep -iE "^fix: " | sed 's/^fix: //')

          # Add features and fixes to release notes
          if [ -n "$FEATURES" ]; then
            echo -e "\n## Features" >> $RELEASE_NOTES
            echo "$FEATURES" | while read -r line; do echo "- $line"; done >> $RELEASE_NOTES
          fi

          if [ -n "$FIXES" ]; then
            echo -e "\n## Fixes" >> $RELEASE_NOTES
            echo "$FIXES" | while read -r line; do echo "- $line"; done >> $RELEASE_NOTES
          fi

      # Create the release with the download-artifacts and release notes
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: release-assets/release-notes.md
          files: release-assets/*.apk

      # Update CHANGELOG with new release notes
      - name: Update CHANGELOG.md
        run: |
          CHANGELOG_FILE="CHANGELOG.md"
          RELEASE_NOTES="release-assets/release-notes.md"
          TEMP_FILE="CHANGELOG_TEMP.md"

          # Create Changelog.md if it doesn't exist
          if [ ! -f "$CHANGELOG_FILE" ]; then
            touch "$CHANGELOG_FILE"
          fi

          # Prepend new release notes
          {
            echo "## ${{ github.ref_name }}"
            cat "$RELEASE_NOTES"
            echo ""
            cat "$CHANGELOG_FILE"
          } > "$TEMP_FILE"

          mv "$TEMP_FILE" "$CHANGELOG_FILE"

      # Push the updated CHANGELOG back to repo
      - name: Commit and push updated CHANGELOG.md
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for ${{ github.ref_name }}"
          git push origin main
